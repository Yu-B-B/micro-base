redis主从复制同步数据是异步的，还是存在锁丢失问题。
               |
               | 既然redis的锁无法保证一定不丢失
               |
红锁：
1、启动基数台redis单例
2、向各个redis中发送数据，当超过一半数量后。当整体加锁时间小于锁过期时间，表示有效
3、加锁成功后，获取锁资源
4、释放锁/加锁失败，向redis 们发送释放锁请求
               |
               | 存在NPC问题，网络延迟、进程暂停、时钟漂移。与redis做通信时存在延迟、在Java中存在STW、
               | 在判断整体时间上时，解决了网络延迟和进程暂停问题。
               | 但是服务器上做加锁时存在时间不一致（整体加锁时间为最晚成功一台-最早成功一台的时间）
               |
Redis的复制：
所有的架构都是基于redis复制，都是将数据从主节点复制到从节点
分为：一主一从，一主多从，树状主从

注意：
redis搭建了主从后，从节点默认无法写入数据，为了维持主从中数据的单向流动，防止主从数据不一致问题

主从复制原理：
1、从节点保存主节点相关信息
2、从节点与主节点建立socket连接
3、发送ping命令，验证是否连通
4、权限校验
5、异步同步数据
6、命令同步数据
               |
               |
               |
               |
               |
异步同步数据时，redis采用psync做数据同步，同步分为“全量同步”和“部分同步”
《全量同步》
1、从节点向主节点发送同步请求，psync ？ -1，？表示运行id
2、主节点收到请求将FULLREPSYNC、运行id、偏移量发给从节点
3、主节点通过bgsave生成RDB文件
4、主节点将RDB发送给从节点
5、发送过程中产生的新数据写入客户端缓冲区中
6、从节点拿到RDB文件删除旧数据，写入新数据
7、从节点读取客户端缓冲区内容
8、从节点若开启AOF后，重写AOF中内容

《部分同步》
为了解决全量同步时，出现网络波动造成中断 或 同步超时中断
1、从节点恢复网络连接
2、通过psync ？ offset给主节点发送数据
3、判断主节点中积压缓冲区是否存在offset后的数据
4、存在时同步到从节点中
5、不存在退化为全量复制
               |
               |
               |
               |
               |
